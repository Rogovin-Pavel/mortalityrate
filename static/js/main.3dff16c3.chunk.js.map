{"version":3,"sources":["components/data/read-text-file.js","utils/keys.js","components/details/index.js","components/details/details.js","components/item-list/index.js","components/item-list/item-list.js","components/app/index.js","components/app/app.js","index.js"],"names":["readTextFile","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","stop","apply","this","arguments","keys","2010","2011","2012","2013","2014","2015","2016","2017","ISO","name","bounds","Details","selectedItem","listClassName","year2010","year2011","year2012","year2013","year2014","year2015","year2016","year2017","react_default","createElement","className","style","maxWidth","ItemList","onClickItem","map","item","key","onClick","App","state","getSelectedItem","id","_this","setState","getData","then","newData","objectSpread","uuid","_this$state","components_item_list","components_details","Component","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.3dff16c3.chunk.js","sourcesContent":["const readTextFile = async () => { \r\n    const res = await fetch(`./data.json`);\r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch` +\r\n          `, received ${res.status}`)\r\n      }\r\n    const data = await res.json();\r\n    return data['Country estimates'];\r\n};\r\n\r\nexport default readTextFile;","const keys = {\r\n  2010: \"2010\",\r\n  2011: \"2011\",\r\n  2012: \"2012\",\r\n  2013: \"2013\",\r\n  2014: \"2014\",\r\n  2015: \"2015\",\r\n  2016: \"2016\",\r\n  2017: \"2017\",\r\n  ISO: \"ISO Code\",\r\n  name: \"Country Name\",\r\n  bounds: \"Uncertainty bounds*\"\r\n};\r\n\r\nexport default keys;","import Details from './details';\r\n\r\nexport default Details;","import React from 'react';\r\nimport keys from './../../utils/keys';\r\n\r\nimport './details.css';\r\n\r\nconst Details = ({ selectedItem }) => {\r\n  const listClassName = \"list-group-item d-flex justify-content-between align-items-center\";\r\n    const { 2010: year2010,\r\n            2011: year2011,\r\n            2012: year2012,\r\n            2013: year2013,\r\n            2014: year2014,\r\n            2015: year2015,\r\n            2016: year2016,\r\n            2017: year2017,\r\n            ISO,\r\n            name,\r\n            bounds\r\n          } = keys;\r\n\r\n  if(selectedItem) {\r\n    return (\r\n      <div className=\"card text-white bg-primary mb-3\" style={{maxWidth: 20 + 'rem'}}>\r\n        <div className=\"card-header\">Country: {selectedItem[name]}</div>\r\n        <div className=\"card-body\">\r\n          <ul className=\"list-group\">\r\n            <li className={listClassName}>{`${ISO}: ${selectedItem[ISO]}`}</li>\r\n            <li className={listClassName}>{`${bounds}: ${selectedItem[bounds]}`}</li>\r\n            <li className={listClassName}>{`${year2010}: ${selectedItem[year2010]}`}</li>\r\n            <li className={listClassName}>{`${year2011}: ${selectedItem[year2011]}`}</li>\r\n            <li className={listClassName}>{`${year2012}: ${selectedItem[year2012]}`}</li>\r\n            <li className={listClassName}>{`${year2013}: ${selectedItem[year2013]}`}</li>\r\n            <li className={listClassName}>{`${year2014}: ${selectedItem[year2014]}`}</li>\r\n            <li className={listClassName}>{`${year2015}: ${selectedItem[year2015]}`}</li>\r\n            <li className={listClassName}>{`${year2016}: ${selectedItem[year2016]}`}</li>\r\n            <li className={listClassName}>{`${year2017}: ${selectedItem[year2017]}`}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>Select country please!</div>\r\n  }\r\n  \r\n};\r\n\r\nexport default Details;","import ItemList from './item-list';\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport './item-list.css';\r\n\r\nconst ItemList = ({ data, onClickItem }) => {\r\n  const listClassName = \"list-group-item d-flex justify-content-between align-items-center\";\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {data.map((item) => {\r\n        return <li className={listClassName} key={item['id']}\r\n                   onClick={() => onClickItem(item['id'])}>{`${item['Country Name']}, Uncertainty bounds*: ${item['Uncertainty bounds*']}` }</li>\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ItemList;","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport './app.css';\r\nimport readTextFile from './../data/read-text-file';\r\nimport uuid from 'uuid';\r\n\r\nimport Details from './../details';\r\nimport ItemList from './../item-list';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    data: null,\r\n    selectedItem: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  getSelectedItem = (id) => {\r\n    let selectedItem;\r\n    this.state.data.map((item) => {\r\n      if(item['id'] === id) {\r\n        selectedItem = item;\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n    this.setState({\r\n      selectedItem\r\n    });\r\n  }\r\n\r\n  getData = () => {\r\n    readTextFile()\r\n      .then((data) => {\r\n        const newData = data.map((item) => {\r\n          return {\r\n            ...item,\r\n            id: uuid()\r\n          };\r\n        });\r\n        this.setState({\r\n          data: newData\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { data, selectedItem } = this.state;\r\n    if(data) {\r\n      return (\r\n        <main className=\"container\">\r\n          <section className=\"jumbotron main-section\">\r\n            <ItemList data={data} onClickItem={this.getSelectedItem}/>\r\n            <Details selectedItem={selectedItem} />\r\n          </section>\r\n        </main>\r\n      );\r\n    } else {\r\n      return <div>Loading...</div>\r\n    }\r\n    \r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}